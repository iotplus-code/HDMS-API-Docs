openapi: 3.0.3
info:
  title: HDMS 하베스팅 데이터 모니터링 시스템 API
  description: |
    하베스팅 센서 데이터 모니터링 시스템의 REST API 문서입니다.
    
    ## 주요 기능
    - 🔐 사용자 인증 및 권한 관리
    - 👥 사용자 관리 (CRUD)
    - 📊 센서 데이터 모니터링
    - 🏢 시설 관리
    - 📈 통계 및 분석
    - 🚨 알림 관리
    
    ## 인증 방식
    JWT Bearer Token을 사용합니다. 로그인 후 받은 토큰을 모든 요청의 Authorization 헤더에 포함해야 합니다.
    
    예시: `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
    
  version: 1.0.0
  contact:
    name: HDMS Team
    email: admin@hdms.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: 개발 서버
  - url: https://api.hdms.com/api
    description: 운영 서버

security:
  - bearerAuth: []

paths:
  # 인증 관련 API
  /auth/login:
    post:
      tags:
        - 인증 관리
      summary: 사용자 로그인
      description: 사용자 ID/이메일과 비밀번호로 로그인하여 JWT 토큰을 발급받습니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              admin_login:
                summary: 관리자 로그인
                value:
                  userIdOrEmail: "admin"
                  password: "admin123!"
              user_login:
                summary: 일반 사용자 로그인
                value:
                  userIdOrEmail: "user@hdms.com"
                  password: "user123!"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: 로그인 성공 응답
                  value:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    tokenType: "Bearer"
                    expiresIn: 86400
                    user:
                      id: 1
                      userId: "admin"
                      username: "관리자"
                      email: "admin@hdms.com"
                      role: "ADMIN"
                      roleDescription: "관리자"
                      buildingId: 1
                      boardId: 1
                      isActive: true
                      menuPermissions:
                        menuDashboard: true
                        menuMonitoring: true
                        menuBoards: true
                        menuSensors: true
                        menuStatistics: true
                        menuAlerts: true
                        menuUsers: true
                        menuFacilities: true
                        menuSettings: true
        '400':
          description: 로그인 실패 - 잘못된 인증 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: 잘못된 인증 정보
                  value:
                    message: "로그인에 실패했습니다. 사용자 ID/이메일 또는 비밀번호를 확인해주세요."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - 인증 관리
      summary: 로그아웃
      description: 사용자 로그아웃 처리 (JWT는 stateless이므로 클라이언트에서 토큰 삭제 필요)
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  summary: 로그아웃 성공
                  value:
                    message: "로그아웃되었습니다."

  /auth/me:
    get:
      tags:
        - 인증 관리
      summary: 현재 사용자 정보 조회
      description: JWT 토큰을 통해 현재 로그인한 사용자의 정보를 조회합니다.
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: 사용자 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 사용자 관리 API
  /admin/users:
    get:
      tags:
        - 사용자 관리
      summary: 모든 사용자 목록 조회
      description: 시스템에 등록된 모든 사용자의 목록을 조회합니다. (관리자 권한 필요)
      responses:
        '200':
          description: 사용자 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: 권한 없음 - 관리자만 접근 가능
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - 사용자 관리
      summary: 새 사용자 생성
      description: 새로운 사용자를 생성합니다. 사용자 ID와 이메일은 중복될 수 없습니다. (관리자 권한 필요)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              admin_user:
                summary: 관리자 사용자 생성
                value:
                  userId: "admin2"
                  username: "부관리자"
                  email: "admin2@hdms.com"
                  password: "admin123!"
                  role: "ADMIN"
                  buildingId: 1
                  boardId: 1
                  isActive: true
                  menuDashboard: true
                  menuMonitoring: true
                  menuBoards: true
                  menuSensors: true
                  menuStatistics: true
                  menuAlerts: true
                  menuUsers: true
                  menuFacilities: true
                  menuSettings: true
              regular_user:
                summary: 일반 사용자 생성
                value:
                  userId: "user1"
                  username: "일반사용자"
                  email: "user1@hdms.com"
                  password: "user123!"
                  role: "USER"
                  buildingId: 1
                  boardId: 1
                  isActive: true
                  menuDashboard: true
                  menuMonitoring: true
                  menuBoards: false
                  menuSensors: true
                  menuStatistics: false
                  menuAlerts: true
                  menuUsers: false
                  menuFacilities: false
                  menuSettings: false
      responses:
        '200':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 잘못된 요청 - 중복된 사용자 ID/이메일 또는 유효성 검사 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicate_userid:
                  summary: 중복 사용자 ID
                  value:
                    message: "이미 존재하는 사용자 ID입니다."
                duplicate_email:
                  summary: 중복 이메일
                  value:
                    message: "이미 존재하는 이메일입니다."
        '403':
          description: 권한 없음 - 관리자만 접근 가능

  /admin/users/{userId}:
    get:
      tags:
        - 사용자 관리
      summary: 특정 사용자 정보 조회
      description: 사용자 ID로 특정 사용자의 상세 정보를 조회합니다. (관리자 권한 필요)
      parameters:
        - name: userId
          in: path
          required: true
          description: 조회할 사용자의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 사용자 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 사용자를 찾을 수 없음
        '403':
          description: 권한 없음 - 관리자만 접근 가능

    delete:
      tags:
        - 사용자 관리
      summary: 사용자 삭제
      description: 특정 사용자를 삭제합니다. (관리자 권한 필요)
      parameters:
        - name: userId
          in: path
          required: true
          description: 삭제할 사용자의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 사용자 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: 사용자를 찾을 수 없음
        '403':
          description: 권한 없음 - 관리자만 접근 가능

  /admin/users/{userId}/toggle-status:
    put:
      tags:
        - 사용자 관리
      summary: 사용자 활성화/비활성화 상태 토글
      description: 사용자의 활성화 상태를 변경합니다. (관리자 권한 필요)
      parameters:
        - name: userId
          in: path
          required: true
          description: 상태를 변경할 사용자의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 사용자 상태 변경 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 사용자를 찾을 수 없음
        '403':
          description: 권한 없음 - 관리자만 접근 가능

  /admin/users/{userId}/menu-permissions:
    put:
      tags:
        - 사용자 관리
      summary: 사용자 메뉴 권한 업데이트
      description: 특정 사용자의 메뉴 접근 권한을 업데이트합니다. (관리자 권한 필요)
      parameters:
        - name: userId
          in: path
          required: true
          description: 권한을 업데이트할 사용자의 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuPermissionsDto'
            examples:
              full_permissions:
                summary: 모든 권한 허용
                value:
                  menuDashboard: true
                  menuMonitoring: true
                  menuBoards: true
                  menuSensors: true
                  menuStatistics: true
                  menuAlerts: true
                  menuUsers: true
                  menuFacilities: true
                  menuSettings: true
              limited_permissions:
                summary: 제한된 권한
                value:
                  menuDashboard: true
                  menuMonitoring: true
                  menuBoards: false
                  menuSensors: true
                  menuStatistics: false
                  menuAlerts: true
                  menuUsers: false
                  menuFacilities: false
                  menuSettings: false
      responses:
        '200':
          description: 메뉴 권한 업데이트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 사용자를 찾을 수 없음
        '403':
          description: 권한 없음 - 관리자만 접근 가능

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 Authorization 헤더에 포함해주세요. 형식: Bearer {token}

  schemas:
    LoginRequest:
      type: object
      required:
        - userIdOrEmail
        - password
      properties:
        userIdOrEmail:
          type: string
          description: 사용자 ID 또는 이메일
          example: "admin"
        password:
          type: string
          description: 비밀번호
          format: password
          example: "admin123!"

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT 액세스 토큰
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          description: 토큰 타입
          example: "Bearer"
        expiresIn:
          type: integer
          description: 토큰 만료 시간 (초)
          example: 86400
        user:
          $ref: '#/components/schemas/UserDto'

    UserDto:
      type: object
      properties:
        id:
          type: integer
          description: 사용자 고유 ID
          example: 1
        userId:
          type: string
          description: 사용자 로그인 ID
          example: "admin"
        username:
          type: string
          description: 사용자 이름
          example: "관리자"
        email:
          type: string
          description: 사용자 이메일
          format: email
          example: "admin@hdms.com"
        role:
          type: string
          description: 사용자 역할
          enum: [ADMIN, USER, VIEWER]
          example: "ADMIN"
        roleDescription:
          type: string
          description: 역할 설명
          example: "관리자"
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        boardId:
          type: integer
          description: 보드 ID
          example: 1
        isActive:
          type: boolean
          description: 활성화 상태
          example: true
        menuPermissions:
          $ref: '#/components/schemas/MenuPermissionsDto'

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: 사용자 고유 ID
          example: 1
        userId:
          type: string
          description: 사용자 로그인 ID
          example: "admin"
        username:
          type: string
          description: 사용자 이름
          example: "관리자"
        email:
          type: string
          description: 사용자 이메일
          format: email
          example: "admin@hdms.com"
        role:
          type: string
          description: 사용자 역할
          enum: [ADMIN, USER, VIEWER]
          example: "ADMIN"
        roleDescription:
          type: string
          description: 역할 설명
          example: "관리자"
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        boardId:
          type: integer
          description: 보드 ID
          example: 1
        isActive:
          type: boolean
          description: 활성화 상태
          example: true
        createdAt:
          type: string
          format: date-time
          description: 생성 일시
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: 수정 일시
          example: "2024-01-01T00:00:00Z"
        menuPermissions:
          $ref: '#/components/schemas/MenuPermissionsDto'

    CreateUserRequest:
      type: object
      required:
        - userId
        - username
        - email
        - password
        - role
      properties:
        userId:
          type: string
          description: 사용자 로그인 ID
          example: "newuser"
          minLength: 3
          maxLength: 50
        username:
          type: string
          description: 사용자 이름
          example: "새로운 사용자"
          minLength: 1
          maxLength: 100
        email:
          type: string
          description: 사용자 이메일
          format: email
          example: "newuser@hdms.com"
        password:
          type: string
          description: 비밀번호
          format: password
          example: "password123!"
          minLength: 8
        role:
          type: string
          description: 사용자 역할
          enum: [ADMIN, USER, VIEWER]
          example: "USER"
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        boardId:
          type: integer
          description: 보드 ID
          example: 1
        isActive:
          type: boolean
          description: 활성화 상태
          example: true
          default: true
        menuDashboard:
          type: boolean
          description: 대시보드 메뉴 권한
          example: true
          default: true
        menuMonitoring:
          type: boolean
          description: 모니터링 메뉴 권한
          example: true
          default: true
        menuBoards:
          type: boolean
          description: 보드 메뉴 권한
          example: false
          default: false
        menuSensors:
          type: boolean
          description: 센서 메뉴 권한
          example: true
          default: true
        menuStatistics:
          type: boolean
          description: 통계 메뉴 권한
          example: false
          default: false
        menuAlerts:
          type: boolean
          description: 알림 메뉴 권한
          example: true
          default: true
        menuUsers:
          type: boolean
          description: 사용자 관리 메뉴 권한
          example: false
          default: false
        menuFacilities:
          type: boolean
          description: 시설 관리 메뉴 권한
          example: false
          default: false
        menuSettings:
          type: boolean
          description: 설정 메뉴 권한
          example: false
          default: false

    MenuPermissionsDto:
      type: object
      description: 메뉴 접근 권한 정보
      properties:
        menuDashboard:
          type: boolean
          description: 대시보드 메뉴 권한
          example: true
        menuMonitoring:
          type: boolean
          description: 모니터링 메뉴 권한
          example: true
        menuBoards:
          type: boolean
          description: 보드 메뉴 권한
          example: false
        menuSensors:
          type: boolean
          description: 센서 메뉴 권한
          example: true
        menuStatistics:
          type: boolean
          description: 통계 메뉴 권한
          example: false
        menuAlerts:
          type: boolean
          description: 알림 메뉴 권한
          example: true
        menuUsers:
          type: boolean
          description: 사용자 관리 메뉴 권한
          example: false
        menuFacilities:
          type: boolean
          description: 시설 관리 메뉴 권한
          example: false
        menuSettings:
          type: boolean
          description: 설정 메뉴 권한
          example: false

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: 오류 메시지
          example: "오류가 발생했습니다."

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: 성공 메시지
          example: "작업이 성공적으로 완료되었습니다."

tags:
  - name: 인증 관리
    description: 사용자 로그인, 로그아웃 및 인증 관련 API
  - name: 사용자 관리
    description: 관리자 전용 사용자 관리 API (CRUD 및 권한 관리) 